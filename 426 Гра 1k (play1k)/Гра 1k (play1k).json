{"name": "Гра 1k (play1k)", "text": "Гра 1k (play1k)\nНа столі – n фішок. Два гравці беруть по черзі або одну, або k фішок. Перемагає той, хто бере останню фішку. Напишіть програму, яка для інтервалу кількостей фішок (ІКФ) [start;finish] визначає, скільки разів c1 для кількостей фішок із ІКФ перемагає гравець, що робить перший хід і скільки разів c2 переможе той, хто робить другий хід.\nВхідні дані\n1 ≤ start < finish ≤ 1000000, 2 ≤ k ≤ 1000000. Ввести значення k, start та finish зі стандартного пристрою введення.\nВихідні дані\nНа стандартний пристрій виведення вивести c1 та c2.", "compiler": "Judge C++", "send_date": "16 нояб. 2017 г., 17:39:40", "time": 6.01, "memory": 1804, "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct S {\n    vector<int> vec;\n};\nbool rule(int a, int b) {\n    return a > b;\n}\nint main() {\n    ios_base::sync_with_stdio(0);\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n    int n, s;\n    int ans = 0;\n    int m;\n    cin >> n >> s;\n    int a[n+1];\n    for(int i = 1; i <= n; ++i)\n        cin >> a[i];\n    sort(a + 1, a + n + 1, rule);\n    int dp[n + 1][s + 1];\n    S D[n + 1][s + 1];\n    for(int i = 0; i <= n; ++i) {\n        for(int j = 0; j <= s; ++j) {\n            dp[i][j] = 0;\n            D[i][j].vec.assign(n + 1, 0);\n        }\n    }\n    for(int i = 1; i <= n; ++i) {\n        int g = a[i];\n        for(int j = 1; j <= s; ++j) {\n            if(j - g >= 0) {\n                m = max(dp[i][j - g] + g, max(dp[i - 1][j], dp[i - 1][j]));\n                dp[i][j] = m;\n                if(m == dp[i][j - g] + g) {\n                    D[i][j].vec = D[i][j - g].vec;\n                    ++D[i][j].vec[i];\n                }\n                else if(m == dp[i - 1][j])\n                    D[i][j].vec = D[i - 1][j].vec;\n                else\n                    D[i][j].vec = D[i - 1][j].vec;\n            }\n            else {\n                m = max(dp[i - 1][j], dp[i][j - 1]);\n                dp[i][j] = m;\n                if(m == dp[i - 1][j])\n                    D[i][j].vec = D[i - 1][j].vec;\n                else\n                    D[i][j].vec = D[i - 1][j].vec;\n            }\n        }\n    }\n    if(dp[n][s] != s) {\n        cout << 0 << endl;\n        return 0;\n    }\n    for(int i = 1; i <= n; ++i)\n        ans += D[n][s].vec[i];\n    cout << ans << endl;;\n}", "link": "https://www.e-olymp.com/ru/problems/8271"}
{"name": "Покупка билетов", "text": "Покупка билетов\nЗа билетами на премьеру нового мюзикла выстроилась очередь из n человек, каждый из которых хочет купить один билет. На всю очередь работала только одна касса, поэтому продажа билетов шла очень медленно, приводя \"постояльцев\" очереди в отчаяние. Самые сообразительные быстро заметили, что, как правило, несколько билетов в одни руки кассир продает быстрее, чем когда эти же билеты продаются по одному. Поэтому они предложили нескольким стоящим подряд людям отдавать деньги первому из них, чтобы он купил билеты на всех.\nОднако для борьбы со спекулянтами кассир продавал не более трех билетов в одни руки, поэтому договориться таким образом между собой могли лишь два или три подряд стоящих человека.\nИзвестно, что на продажу i-му человеку из очереди одного билета кассир тратит ai секунд, на продажу двух билетов bi секунд, трёх билетов ci секунд. Напишите программу, которая подсчитает минимальное время, за которое можно обслужить всех покупателей.\nОбратите внимание, что билеты на группу объединившихся людей всегда покупает первый из них. Также никто в целях ускорения не покупает лишних билетов (то есть билетов, которые никому не нужны).\nВходные данные\nПервое число содержит количество покупателей в очереди n (1 ≤ n ≤ 5000). Далее идет n троек натуральных чисел ai, bi, ci. Каждое из этих чисел не превышает 3600. Люди в очереди нумеруются начиная от кассы.\nВыходные данные\nВывести минимальное время в секундах, за которое можно обслужить всех покупателей.", "compiler": "Judge C++", "send_date": "14 мар. 2017 г., 13:39:39", "time": 6.96, "memory": 1792, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n  long long D[5001];\n  int a[5001];\n  int b[5001];\n  int c[5001];\n  long long m(long long a, long long b)\n  {\n      if(a < b)\n        return a;\n      else\n        return b;\n  }\nint main()\n{\n    int n;\n    cin >> n;\n    int i, j;\n\n    for(i = 1; i <= n; i++)\n    {\n       cin >> a[i] >> b[i] >> c[i];\n\n    }\n    D[0] = 0;\n    D[1] = a[1];\n    D[2] = m(a[1] + a[2],b[1]);\n    for(i = 3; i <= n; i++)\n    {\n        D[i] = m(m(D[i-1] + a[i], D[i-2] + b[i-1]), D[i-3] + c[i-2]);\n    }\n    cout << D[n] << endl;\n\n}", "link": "https://www.e-olymp.com/ru/problems/799"}
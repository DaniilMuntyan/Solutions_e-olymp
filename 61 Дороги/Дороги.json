{"name": "Дороги", "text": "Дороги\nВ Украине, как известно, много проблем. Одна из них - дороги. Вновь избранный президент Украины решил заняться строительством дорог. Его цель - построить некоторое дополнительное количество дорог между городами так, чтобы можно было проехать из любого города Украины в любой (возможно, через другие города, не обязательно напрямую). Естественно, при этом дополнительных дорог должно быть построено как можно меньше.\nБудем считать, что все дороги в Украине двухсторонние (и уже имеющиеся, и те, что будут построены), то есть по ним возможно движение в обоих направлениях. Учтите, что между двумя городами может быть несколько дорог. Кроме того, могут существовать дороги, связывающие город с самим собой.\nВходные данные\nПервая строка содержит два натуральных числа n и m (1 ≤ n, m ≤ 10000) - количество городов и количество уже существующих дорог. Следующие m строк содержат по два целых числа ai и bi (1 ≤ ai, bi ≤ n) - номера городов, которые соединены уже существующей дорогой.\nВыходные данные\nВывести минимальное количество дорог, которое необходимо построить, чтобы существовал путь из любого города в любой.", "compiler": "Judge C++", "send_date": "12 нояб. 2016 г., 22:04:25", "time": 16.72, "memory": 1156, "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nvector <long long> G[10001];\nvector <bool> used(10001);\nvoid proc(long long v)\n{\n     used[v] = true;\n     for(long long u = 0; u < G[v].size(); u++)\n         if(!used[G[v][u]])\n         {\n             proc(G[v][u]);\n         }\n\n\n}\nint main()\n{\n    long long n,s,f,m;\nlong long k = 0;\nlong long i = 0, j = 0;\n    cin >> n >> m;\nwhile(m--)\n{\n    cin >> s >> f;\n    G[s].push_back(f);\n    G[f].push_back(s);\n}\n    for(i=1;i<=n;i++)\n    {\n        if(!used[i])\n            {\n                proc(i);\n                 k++;\n            }\n    }\n    cout << (k-1) << endl;\n\n}", "link": "https://www.e-olymp.com/ru/problems/776"}
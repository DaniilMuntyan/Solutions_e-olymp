{"name": "Двухцветность", "text": "Двухцветность\nВ 1976 году \"Теорема четырёх красок\" была доказана с помощью компьютера. Эта теорема утверждает, что каждая карта может быть окрашена с использованием только четырех цветов таким образом, что ни одна область не будет окрашена тем же цветом, что и ее соседние.\nВам предлагается решить подобную задачу, но попроще. Необходимо выяснить, является ли заданный связный граф двухцветным. То есть можно ли его вершинам назначить цвета (имеется всего два цвета) таким образом, чтобы никакие две смежные вершины не имели одинаковый цвет. Для упрощения задачи можно предположить, что:\nграф не имеет петель.\nграф неориентированный. То есть если вершина a связана с вершиной b, то и b связана с a.\nграф связный. То есть всегда существует как минимум один путь из любой вершины в любою другую.\nВходные данные\nСостоит из нескольких тестов. Каждый тест начинается со строки, содержащей количество вершин n (0 ≤ n ≤ 1000). Вторая строка содержит количество рёбер l (1 ≤ l ≤ 250000). После этого идёт l строк, каждая из которых содержит два числа, указывающие на ребро между двумя вершинами, которые оно соединяет. Вершины в графе будут помечены числом a (1 ≤ a ≤ n). Последний тест содержит n = 0 и не обрабатывается.\nВыходные данные\nВыяснить, можно ли сделать входной граф двухцветным и вывести соответствующее сообщение, как показано в примере.", "compiler": "Judge C++", "send_date": "28 февр. 2017 г., 14:05:10", "time": 137.23, "memory": 3328, "code": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nint i, j;\nvector <int> a[1005];\nvector <int> color(1005);\nbool bl = false;\nvoid DFS(int v, int c)\n{\n    if(bl)\n        return;\n    color[v]=c;\n    for(i = 0; i < a[v].size(); i++)\n    {\n        if(color[a[v][i]] == 0)\n        {\n            DFS(a[v][i],3-c);\n        }else\n        {\n            if(color[a[v][i]] == c)\n            {\n               bl = true;\n               return;\n            }\n        }\n    }\n\n}\nint main()\n{\n    while(cin >> n){\n            if(n==0){\n            exit(0);\n            }\n    cin  >> m;\n      int x,y;\n\n    for(i = 0; i < m;i++)\n    {\n\n        cin >> x >> y;\n        a[x].push_back(y);\n        a[y].push_back(x);\n    }\n\n    for(i = 0; i < n; i++)\n        if(color[i] == 0)\n            DFS(i,1);\n    if(!bl)\n        cout << \"BICOLOURABLE.\" << endl;\n    else\n    cout << \"NOT BICOLOURABLE.\" << endl;\n    bl = false;\n    color = vector <int> (1005,0);\n    for(i=0;i<1000;i++)\n        a[i].clear();\n    }\n\n\n}", "link": "https://www.e-olymp.com/ru/problems/3165"}
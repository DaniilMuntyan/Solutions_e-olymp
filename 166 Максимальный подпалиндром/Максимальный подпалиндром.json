{"name": "Максимальный подпалиндром", "text": "Максимальный подпалиндром\nПалиндромом называется строка, которая одинаково читается как слева направо, так и справа налево. Подпалиндромом данной строки называется последовательность символов из данной строки, не обязательно идущих подряд, являющаяся палиндромом. Например, HELOLEH является подпалиндромом строки HTEOLFEOLEH. Напишите программу, находящую в данной строке подпалиндром максимальной длины.\nВходные данные\nВо входном файле находится строка длиной не более 100 символов, состоящая из заглавных букв латинского алфавита.\nВыходные данные\nВыведите на первой строке выходного файла длину максимального подпалиндрома, а на второй строке сам максимальный подпалиндром. Если таких подпалиндромов несколько, то ваша программа должна вывести любой из них.", "compiler": "Judge C++", "send_date": "17 авг. 2016 г., 15:39:21", "time": 3.89, "memory": 856, "code": "#include <string>\n#include<bits/stdc++.h>\n#include <iostream>\nusing namespace std;\nstring max1(string a, string b)\n{\nif(a.length() >= b.length()) return a;\nreturn b;\n}\nstring max1(string a, string b, string c)\n{\nreturn max(a, max(b, c));\n}\nint main()\n{\n    string s;\n    cin >> s;\n    int L = s.length();\n    string d[101][101];\n    int i,j;\n    string t = \"!\";\n    for(i=0;i<L;i++)\n        d[i][i] = s[i];\n    i=1;\n    for(i=1;i<L;i++)\n    {\n        for(j=i;j<L;j++)\n        {\n            int g = j-i;\n            if(s[g]!=s[j])\n            {\n                d[g][j] = max1(d[g][j-1],d[g+1][j]);\n            }else\n            {\n                d[g][j] = max1(d[g][j-1], max1(d[g+1][j], s[g] + d[g+1][j-1] + s[j]));\n            }\n        }\n    }\n\ncout <<d[0][L-1].length() << endl << d[0][L-1] << endl;;\n\n}", "link": "https://www.e-olymp.com/ru/problems/1740"}
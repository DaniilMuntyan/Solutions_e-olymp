{"name": "Сортировка ДНК", "text": "Сортировка ДНК\nОдной из мер \"неупорядоченности\" в последовательности является количество пар элементов, которые находятся в неправильном порядке по отношению друг к другу. Например, в последовательности букв \"DAABEC\", эта мера равна 5, так как D больше четырех букв справа, а Е больше одной буквы справа. Этой мерой является количество инверсий в последовательности. Последовательность \"AACEDGG\" имеет только одну инверсию (E и D) - она почти отсортированная, в то время как последовательность \"ZWQM\" имеет 6 инверсий (она полностью неотсортированная).\nВам следует отсортировать последовательность ДНК строк (они содержат только четыре буквы A, C, G, Т). Однако сортировку следует производить не в алфавитном порядке, а в порядке \"упорядоченности\", от \"самых отсортированных\" до \"наименее отсортированных\". Все строки имеют одинаковую длину.\nВходные данные\nПервая строка содержит целое число t, за которым следует пустая строка и t тестов. Между соседними тестами находится пустая строка.\nПервая строка каждого теста содержит два целых числа: длину входных строк n (0 < n ≤ 50) и количество строк m (0 < m ≤ 100). Далее следуют m строк, каждая из которых имеет длину n.\nВыходные данные\nДля каждого теста вывести последовательность строк в порядке от \"наиболее отсортированной\" до \"наименее отсортированной\". Если две или более строки равны при указанной сортировке, то выводить их следует в том же порядке в каком они поступали на вход.\nМежду ответами на соседние тесты следует выводить пустую строку.", "compiler": "Judge C++", "send_date": "12 нояб. 2017 г., 16:27:07", "time": 14.86, "memory": 1668, "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nstruct S{\n    string s;\n};\ninline int getNum(string s){\n    int cA = 0, cC = 0, cG = 0, cT = 0;\n    int res = 0;\n    map <char, int> m;\n    m.insert({'A', 0});\n    m.insert({'C', 0});\n    m.insert({'G', 0});\n    m.insert({'T', 0});\n    for(int i = 0; i < s.length(); i++)\n        if(i != s.length()-1)\n            for(int j = i+1; j < s.length(); j++)\n                if(s[j] < s[i])\n                    res++;\n    return res;\n\n}\nmain() {\n    ios_base::sync_with_stdio(0);\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    struct{\n        bool operator()(S a, S b)const{\n            if(getNum(a.s) < getNum(b.s))\n                return true;\n            return false;\n        }\n    }comparator;\n\n    int t;\n    cin >> t;\n    while(t--){\n        int n, m;\n        cin >> n >> m;\n        vector <S> a;\n        for(int i = 0; i < m; i++){\n            S curr;\n            cin >> curr.s;\n            a.push_back(curr);\n        }\n        sort(a.begin(), a.end(), comparator);\n        for(int i = 0; i < m; i++)\n            cout << a[i].s << endl;\n        cout << endl;\n    }\n}", "link": "https://www.e-olymp.com/ru/problems/1306"}
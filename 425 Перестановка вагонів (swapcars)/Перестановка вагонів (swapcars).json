{"name": "Перестановка вагонів (swapcars)", "text": "Перестановка вагонів (swapcars)\nУ поїзді не всі вагони - на місцях, що збігаються з їх номерами (відлік від локомотива), деякі вагони слід відчіпляти й переводити на відповідні номерам місця в поїзді. Створити програму, яка визначає: 1) кількість відчеплень c між сусідніми вагонами, 2) максимальну відстань maxd, на яку слід пересунути вагон, 3) номери початкової (start) та кінцевої (end) позицій для maxd. Якщо відстаней maxd кілька, вивести значення start та end для першого з таких вагонів.\nВхідні дані\n4 ≤ n ≤ 80. Значення n ввести зі стандартного пристрою введення в першому рядку. У другому рядку ввести розділені пропуском номери вагонів у порядку їх місцезнаходження від локомотиву. Одиниця вимірювання maxd – довжина вагона (всі вагони однакові).\nВихідні дані\nВ першому рядку вивести c. В наступному – значення maxd, start та end, розділені пропусками.", "compiler": "Judge C++", "send_date": "16 нояб. 2017 г., 17:15:20", "time": 2.79, "memory": 1800, "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nint getDec(string s){\n    int ans = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'b')\n            ans += pow(2,i)*1;\n    }\n    return ans;\n}\nvector<bool> getTwo(int dec){\n    int n = dec;\n    vector <bool> ans;\n    if(dec == 0){\n        ans.push_back(0);\n        return ans;\n    }\n    while(n > 0){\n        ans.push_back(n%2);\n        n/=2;\n    }\n    reverse(ans.begin(), ans.end());\n    return ans;\n}\nmain() {\n    ios_base::sync_with_stdio(0);\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n    int n;\n    cin >> n;\n    int ans = 1;\n    while(n > 10){\n        n-=9;\n        ans *= 9;\n    }\n    if(n == 10)\n        ans *= 16;\n    else\n        ans *= n;\n    cout << ans << endl;\n}", "link": "https://www.e-olymp.com/ru/problems/8270"}
{"name": "Ставка", "text": "Ставка\nАндрей очень любит играть в Космический покер.\nВ космическом покере вместо карт используются фишки трех цветов. Казино определяет два числа A и C — коэффициенты для вычисления ставок. Затем игрок по определенным правилам ставит фишки трех цветов: красного, зеленого и синего. Выигрыш игрока вычисляется по формуле:\nA · (r2 + g2 + b2) + C · min{r, g, b},\nгде r, g, b — количество фишек красного, зеленого и синего соответственно.\nПравила, по которым делаются ставки, очень сложны, но сейчас перед Андреем стоит следующая задача. На поле уже есть r красных, g зеленых и b синих фишек. Прежде чем будет определен его выигрыш, он может добавить на поле ровно одну фишку любого цвета. Помогите ему выбрать цвет фишки, которую следует добавить на поле, чтобы максимизировать выигрыш.\nВходные данные\nВо входном файле содержится несколько игровых ситуаций, которые требуется проанализировать.\nВ первой строке задано одно целое число t (1 ≤ t ≤ 10000) — количество игровых ситуаций. Каждая игровая ситуация описывается двумя строками. В первой строке задано два целых числа A и C (1 ≤ A, C ≤ 10) — коэффициенты для вычисления выигрыша. Во второй строке задано три целых числа r, g и b (0 ≤ r, g, b ≤ 15) — количество фишек красного, зеленого и синего цвета, соответственно.\nВыходные данные\nВыведите t строк. В k-ой строке выведите \"RED\", если оптимально добавить красную фишку, \"GREEN\", если оптимально добавить зеленую фишку или \"BLUE\", если оптимально добавить синюю фишку. Если есть несколько оптимальных вариантов, можно вывести любой из них.", "compiler": "Judge C++", "send_date": "8 окт. 2016 г., 21:07:29", "time": 38.79, "memory": 960, "code": "#include <bits/stdc++.h>\nusing namespace std;\nint t,A,C, r,g,b,sum1=0,sum2=0,sum3=0;\nint i,j=0;\nvector <string> d;\nint main()\n{\n    ios_base::sync_with_stdio(0);\n  /*  freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);\n    cin.tie(0);\n    cout.tie(0);*/\n    cin >> t;\n    for(i=0;i<t;i++)\n    {\n       cin >> A >> C;\n       cin >> r >> g >> b;\n       r++;\n       sum1 = A*(r*r + g*g + b*b) + C*(min(r,min(g,b)));\n       r--;\n       g++;\n       sum2 = A*(r*r + g*g + b*b) + C*(min(r,min(g,b)));\n       g--;\n       b++;\n       sum3 = A*(r*r + g*g + b*b) + C*(min(r,min(g,b)));\n       b--;\n       if(sum1 >= sum2 && sum1 >= sum3)\n       {\n           d.push_back(\"RED\");\n            continue;\n       }\n       if(sum2 >= sum1 && sum2 >= sum3)\n       {\n           d.push_back(\"GREEN\");\n           continue;\n       }\n       if(sum3 >= sum1 && sum3 >= sum2)\n       {\n           d.push_back(\"BLUE\");\n           continue;\n       }\n\n    }\n      // cout << sum1 << \" \" << sum2 << \" \" << sum3 << endl;\n\n    for(i=0;i<t;i++)\n        cout << d[i] << endl;\n    return 0;\n}", "link": "https://www.e-olymp.com/ru/problems/6282"}
{"name": "Вавилонская башня", "text": "Вавилонская башня\nПри строительстве Вавилонской башни, как известно, Бог смешал все языки. В результате оказалось, что каждый человек знает некоторое множество языков. Два человека могут передать друг другу информацию, если существует язык, который они оба знают. Руководитель стройки передает команды на известных ему языках. Те, кто эти команды получил, могут их передавать дальше, переводя на известные им языки. Определить количество людей, до которых доходят команды руководителя.\nВходные данные\nДля удобства пронумеруем все языки числами от 1 до 50. Сначала задано количество людей n (1 ≤ n ≤ 100), а дальше идут описания того, какие языки знают эти люди. Для каждого человека записано сначала число mi (0 ≤ mi ≤ 50), определяющее количество языков, известных i-ому человеку, а затем перечисляются номера самих этих языков в возрастающем порядке (номера языков - числа от 1 до 50). Считается, что руководитель строительства - это человек с номером 1.\nВыходные данные\nВывести одно число - количество человек, до которых может \"дойти\" отданная руководителем команда (включая самого руководителя).", "compiler": "Judge C++", "send_date": "17 авг. 2017 г., 23:46:24", "time": 6.87, "memory": 1792, "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nmain()\n{\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n    int n;\n    cin >> n;\n    int t,a;\n    vector <bool> used(n, false);\n    vector <int> g[n];\n    queue<int> q;\n    for(int i = 0; i < n; i++){\n        cin >> t;\n        for(int j = 0; j < t; j++)\n        {\n            cin >> a;\n            g[i].push_back(a);\n        }\n    }\n    q.push(0);\n    int ans = 0;\n    while(!q.empty()){\n        int current = q.front();\n        q.pop();\n        if(used[current]) continue;\n        used[current] = true;\n        ans++;\n        for(int i = 0; i < g[current].size(); i++){\n            int current_lang = g[current][i];\n            for(int j = 0; j < n; j++)\n                if(binary_search(g[j].begin(), g[j].end(), current_lang))\n                    q.push(j);\n        }\n    }\n    cout << ans << endl;\n}", "link": "https://www.e-olymp.com/ru/problems/2717"}